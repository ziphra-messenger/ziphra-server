package com.privacity.server.encrypt;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class RSA {

	//	private KeyPair keyPair;
	//	private Key publicKey;
	//	private Key privateKey;

	@Value("${serverconf.asymEncrypt.bits}")
	private int rsa_key_size;
	/**
	 * Generar par de claves
	 * @return
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchProviderException 
	 */
	public KeyPair generateKeyPair() throws NoSuchAlgorithmException, NoSuchProviderException {
		KeyPairGenerator pairgen =   KeyPairGenerator.getInstance("RSA","BC");
		SecureRandom random = new SecureRandom();
		pairgen.initialize(rsa_key_size, random);
		return pairgen.generateKeyPair();
		//return this.keyPair;
	}

	/**
	 * Clave de cifrado
	 * @param key
	 * @return
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchPaddingException
	 * @throws InvalidKeyException
	 * @throws IllegalBlockSizeException
	 * @throws NoSuchProviderException 
	 */
	public byte[] wrapKey(Key key, PrivateKey privateKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, NoSuchProviderException {
		Cipher cipher = Cipher.getInstance("RSA","BC");
		cipher.init(Cipher.WRAP_MODE, privateKey);
		byte[] wrappedKey = cipher.wrap(key);
		return wrappedKey;
	}

	/**
	 * Clave de descifrado
	 * @param wrapedKeyBytes
	 * @return
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchPaddingException
	 * @throws InvalidKeyException
	 * @throws NoSuchProviderException 
	 */
	public Key unwrapKey(byte[] wrapedKeyBytes, PublicKey publicKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, NoSuchProviderException {
		Cipher cipher = Cipher.getInstance("RSA","BC");
		cipher.init(Cipher.UNWRAP_MODE, publicKey);
		Key key = cipher.unwrap(wrapedKeyBytes, "AES", Cipher.SECRET_KEY);
		return key;
	}
	// 
	//	public Key getPublicKey() {
	//		return publicKey;
	//	}
	// 
	//	public void setPublicKey(Key publicKey) {
	//		this.publicKey = publicKey;
	//	}
	// 
	//	public Key getPrivateKey() {
	//		return privateKey;
	//	}
	// 
	//	public void setPrivateKey(Key privateKey) {
	//		this.privateKey = privateKey;
	//	}

	public byte[] encryptFile(byte[] input, PrivateKey key) 
			throws IOException, GeneralSecurityException {

		Cipher cipher;
		cipher = Cipher.getInstance("RSA","BC");

		cipher.init(Cipher.ENCRYPT_MODE, key);
		return cipher.doFinal(input);
	}

	public byte[] encryptFilePublic(byte[] input, PublicKey key) 
			throws IOException, GeneralSecurityException {

		Cipher cipher;
		cipher = Cipher.getInstance("RSA","BC");

		cipher.init(Cipher.ENCRYPT_MODE, key);
		return cipher.doFinal(input);
	}

	public byte[] decryptFile(byte[] input, PublicKey key) 
			throws IOException, GeneralSecurityException {
		Cipher cipher;
		cipher = Cipher.getInstance("RSA","BC");        	
		cipher.init(Cipher.DECRYPT_MODE, key);
		return cipher.doFinal(input);
	}

	public byte[] decryptFilePrivate(byte[] input, PrivateKey key) 
			throws IOException, GeneralSecurityException {
		Cipher cipher;
		cipher = Cipher.getInstance("RSA","BC");        	
		cipher.init(Cipher.DECRYPT_MODE, key);
		return cipher.doFinal(input);
	}        
//	public static void main(String...strings ) throws Exception {
//		Security.addProvider(new BouncyCastleProvider());
//		RSA t = new RSA();
//
//		KeyPair keyPair = t.generateKeyPair();
//
//		String privateGson = new Gson().toJson(keyPair.getPrivate().getEncoded());
//		String publicGson = new Gson().toJson(keyPair.getPublic().getEncoded());
//		////System.out.println(new Gson().toJson(keyPair.getPrivate().getEncoded()));
//		////System.out.println(new Gson().toJson(keyPair.getPublic().getEncoded()));
//
//		////System.out.println(keyPair.getPublic());
//
//		KeyFactory kf = KeyFactory.getInstance("RSA", "BC");
//		PublicKey java_public;
//		PublicKey android_public;
//		PrivateKey java_privada;
//		PrivateKey android_privada;
//
//		X509EncodedKeySpec spec2 = new X509EncodedKeySpec(
//				new Gson().fromJson(
//						"[48,-126,2,34,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,3,-126,2,15,0,48,-126,2,10,2,-126,2,1,0,-56,101,66,90,103,49,32,109,-10,-19,-48,-116,-15,-74,64,-110,50,-41,-6,53,-110,63,59,104,114,-4,-71,109,-107,111,-100,-49,111,-18,87,-113,-50,-51,-109,71,58,90,-51,26,-1,69,-44,-40,-55,2,69,38,-17,103,-70,-113,107,104,-48,61,1,-22,57,-49,-43,36,-26,-77,-113,-41,123,106,44,75,-126,88,-62,65,121,-20,29,-62,-32,-96,58,-56,-106,-124,61,12,97,23,35,-29,-68,42,-59,-80,-114,-36,-2,41,-115,-13,-78,44,-51,80,1,73,-55,-18,121,-47,-58,62,17,115,-70,0,-114,-11,12,118,122,-3,-55,-22,118,48,-10,-7,97,89,-70,-126,69,-21,-19,61,-24,-3,50,68,-69,-128,-8,-123,-98,-40,95,30,-101,-18,-101,50,-54,96,27,122,68,-91,115,-55,-121,-95,-21,48,-58,28,48,89,45,-43,107,106,116,124,37,99,-35,107,-27,86,-104,52,-52,40,-23,-16,-50,-108,-80,2,58,114,-25,-82,92,-28,-11,113,76,-35,-61,-42,-47,-98,9,55,16,49,-24,-80,45,-107,-70,6,103,95,-102,-89,-27,-88,112,-116,-91,-39,-51,14,-30,-101,-80,95,-21,-39,-118,93,14,70,-116,-103,58,-18,56,-49,40,51,-107,-85,6,66,-58,65,57,-45,102,-36,71,-102,-99,-90,-126,79,-3,66,-46,-11,-48,50,70,91,25,-123,67,124,-102,24,116,41,-103,65,92,-4,73,-54,-63,-70,-92,-110,-93,79,-1,18,58,-28,110,39,112,16,-105,-42,2,125,16,64,106,-84,-82,-127,-108,-37,8,-116,9,-2,-34,-90,-53,32,-83,-48,91,-122,-18,-128,52,50,82,73,-41,-57,-78,61,-10,-33,-19,12,94,-1,73,117,-73,-108,-78,-120,-46,127,-8,-24,28,37,-78,58,93,30,21,-88,73,-54,10,40,73,-87,-20,26,-91,39,0,5,-13,-42,10,38,-102,19,-83,11,-29,33,113,-115,100,0,-40,-20,-116,85,72,-56,115,-29,-106,88,-53,104,24,7,-46,-12,-63,41,-62,80,71,-39,84,24,-27,5,-5,1,-22,25,-99,-25,114,-60,-4,-63,76,42,121,17,56,-126,124,57,93,82,107,104,-13,-104,25,62,-75,14,109,60,6,126,91,30,117,42,49,56,34,45,30,-70,113,-2,117,99,57,44,53,89,-105,-92,-31,-47,-24,98,106,-117,-22,40,32,-71,54,-123,108,91,-98,5,-122,1,42,-35,95,-47,-54,86,-34,48,16,-65,50,-88,-28,64,24,-10,-47,-33,-105,-127,-9,60,-49,-69,-116,-30,34,86,113,-67,125,57,2,3,1,0,1]"
//
//						, byte[].class));
//		java_public = kf.generatePublic(spec2);
//		////System.out.println(java_public.toString());
//
//		{//android
//			//    			X509EncodedKeySpec spec2 = new X509EncodedKeySpec(
//			//    					new Gson().fromJson(
//			//    							"[48,-127,-97,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,3,-127,-115,0,48,-127,-119,2,-127,-127,0,-90,-84,-34,70,93,-51,-13,-122,26,86,109,-7,-115,26,114,2,-118,87,-89,-13,-112,-74,28,-34,-104,-65,-85,-67,-114,-55,-67,-55,112,-7,-55,29,48,126,-102,-94,65,64,72,-107,43,-122,53,118,-74,-113,103,-103,-1,42,83,-118,-127,90,-39,123,-63,13,-38,-111,51,100,-101,0,49,-7,-59,-8,-15,-106,-35,-66,-19,76,-20,-81,57,107,-65,86,25,-32,11,-66,43,-54,115,47,-34,-51,-122,-111,74,-59,-94,98,-21,-31,-71,70,122,121,-54,125,-89,-105,-83,-106,35,-38,-76,19,-43,-20,-95,54,35,58,-58,12,13,-49,-70,21,2,3,1,0,1]"
//			//    							, byte[].class));
//			//    			android_public = kf.generatePublic(spec2);
//			//    			////System.out.println(android_public.toString());
//		}
//		// privada
//
//		KeyFactory kf3 = KeyFactory.getInstance("RSA", "BC");
//		PKCS8EncodedKeySpec spec3 = new PKCS8EncodedKeySpec(
//				new Gson().fromJson(
//						"[48,-126,9,67,2,1,0,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,4,-126,9,45,48,-126,9,41,2,1,0,2,-126,2,1,0,-56,101,66,90,103,49,32,109,-10,-19,-48,-116,-15,-74,64,-110,50,-41,-6,53,-110,63,59,104,114,-4,-71,109,-107,111,-100,-49,111,-18,87,-113,-50,-51,-109,71,58,90,-51,26,-1,69,-44,-40,-55,2,69,38,-17,103,-70,-113,107,104,-48,61,1,-22,57,-49,-43,36,-26,-77,-113,-41,123,106,44,75,-126,88,-62,65,121,-20,29,-62,-32,-96,58,-56,-106,-124,61,12,97,23,35,-29,-68,42,-59,-80,-114,-36,-2,41,-115,-13,-78,44,-51,80,1,73,-55,-18,121,-47,-58,62,17,115,-70,0,-114,-11,12,118,122,-3,-55,-22,118,48,-10,-7,97,89,-70,-126,69,-21,-19,61,-24,-3,50,68,-69,-128,-8,-123,-98,-40,95,30,-101,-18,-101,50,-54,96,27,122,68,-91,115,-55,-121,-95,-21,48,-58,28,48,89,45,-43,107,106,116,124,37,99,-35,107,-27,86,-104,52,-52,40,-23,-16,-50,-108,-80,2,58,114,-25,-82,92,-28,-11,113,76,-35,-61,-42,-47,-98,9,55,16,49,-24,-80,45,-107,-70,6,103,95,-102,-89,-27,-88,112,-116,-91,-39,-51,14,-30,-101,-80,95,-21,-39,-118,93,14,70,-116,-103,58,-18,56,-49,40,51,-107,-85,6,66,-58,65,57,-45,102,-36,71,-102,-99,-90,-126,79,-3,66,-46,-11,-48,50,70,91,25,-123,67,124,-102,24,116,41,-103,65,92,-4,73,-54,-63,-70,-92,-110,-93,79,-1,18,58,-28,110,39,112,16,-105,-42,2,125,16,64,106,-84,-82,-127,-108,-37,8,-116,9,-2,-34,-90,-53,32,-83,-48,91,-122,-18,-128,52,50,82,73,-41,-57,-78,61,-10,-33,-19,12,94,-1,73,117,-73,-108,-78,-120,-46,127,-8,-24,28,37,-78,58,93,30,21,-88,73,-54,10,40,73,-87,-20,26,-91,39,0,5,-13,-42,10,38,-102,19,-83,11,-29,33,113,-115,100,0,-40,-20,-116,85,72,-56,115,-29,-106,88,-53,104,24,7,-46,-12,-63,41,-62,80,71,-39,84,24,-27,5,-5,1,-22,25,-99,-25,114,-60,-4,-63,76,42,121,17,56,-126,124,57,93,82,107,104,-13,-104,25,62,-75,14,109,60,6,126,91,30,117,42,49,56,34,45,30,-70,113,-2,117,99,57,44,53,89,-105,-92,-31,-47,-24,98,106,-117,-22,40,32,-71,54,-123,108,91,-98,5,-122,1,42,-35,95,-47,-54,86,-34,48,16,-65,50,-88,-28,64,24,-10,-47,-33,-105,-127,-9,60,-49,-69,-116,-30,34,86,113,-67,125,57,2,3,1,0,1,2,-126,2,0,42,67,-96,-16,-20,30,-94,86,78,-29,-19,62,44,-92,97,-115,-12,7,53,16,35,94,14,-85,-126,-60,-26,94,-60,75,-101,-24,-20,20,122,-121,43,-8,-109,125,76,67,102,74,-79,88,11,2,5,-78,-30,-34,-55,83,57,55,-110,81,-78,-55,-117,35,-39,57,-118,28,-108,67,126,-84,-43,-84,-104,-42,-4,16,-72,55,-110,-3,71,113,-104,106,114,-69,103,115,80,100,-47,-3,77,102,116,-125,24,-38,-103,-26,-27,-5,-31,-94,106,11,-92,-23,-96,-69,-19,72,-52,-116,127,-95,11,-111,58,-61,111,99,35,83,-63,-80,-48,-21,16,46,87,-120,85,13,-43,-106,48,37,8,14,44,-101,106,4,-80,-1,12,107,50,11,52,84,-126,82,-102,-116,-27,-67,-53,77,-56,56,-108,-23,6,32,18,56,97,48,4,-54,106,46,62,-49,94,-19,-25,-4,-35,-16,41,-104,79,-43,-94,-47,102,53,-111,124,46,122,-23,-44,-34,36,26,23,119,-28,-125,111,-86,36,30,101,-108,79,-10,-84,112,4,-24,56,81,-39,-109,-25,-57,-8,109,41,79,67,122,-97,42,-18,94,-64,-77,60,39,-61,-29,-72,-88,-112,28,-117,28,-80,-83,110,-109,109,-3,-68,-22,63,31,13,22,-94,-83,-55,-2,106,38,81,113,-102,75,14,-108,81,97,-68,99,-54,41,100,90,24,35,32,14,-37,66,-64,120,21,10,-54,30,-114,-69,-119,-26,-7,17,0,78,86,-68,-118,-97,56,-90,-71,-71,-41,60,47,51,-66,56,-29,-84,-80,117,12,-90,-76,-113,-103,51,-64,-45,72,-85,-3,83,-79,47,30,29,80,64,119,-3,-44,-95,52,-79,98,56,65,75,60,82,-71,-33,126,83,-109,-46,-2,-124,-44,-79,29,-100,-107,117,-67,8,64,69,-125,101,27,-81,-101,-79,122,-108,64,124,-108,47,-14,117,-32,18,16,-76,-45,12,127,36,75,-6,51,-91,-102,-86,118,-69,-20,10,-48,-9,-5,-102,79,-69,43,89,57,-6,69,-1,-104,67,83,-7,126,41,-5,79,-126,72,-16,110,-72,-86,-28,112,21,100,68,-106,61,-124,-62,-4,-102,-8,75,-72,-25,91,-49,45,-59,115,96,-73,61,51,114,83,-35,66,-80,-2,-124,118,91,-83,87,-66,-26,-112,22,60,-108,83,19,9,-26,-50,75,-89,-84,-76,-28,16,-109,48,7,33,72,1,-93,-115,-2,-122,81,22,88,76,40,-66,66,54,70,-26,61,64,-123,-86,98,-53,-47,-51,36,106,76,-61,-7,-52,41,38,-77,120,11,-17,25,2,-126,1,1,0,-20,6,112,82,30,101,119,74,31,65,109,18,-108,-19,-72,55,-20,82,-50,-53,51,-77,110,55,34,-55,-90,59,-3,50,86,79,-57,-62,-8,-29,-111,125,-123,-80,19,-101,4,74,27,16,105,23,-27,9,6,123,52,-49,-124,-51,27,41,-85,22,66,99,-66,-64,49,108,40,92,26,-118,4,-48,-45,6,-80,30,81,-85,69,30,98,51,103,57,68,-93,-4,126,-2,-58,-102,-77,37,40,23,32,79,22,6,117,85,14,8,62,82,-20,-60,17,-126,-103,19,-39,-36,-23,-128,96,-100,-76,44,-73,-73,-103,71,-40,-59,-19,94,-18,-79,112,110,-126,-5,-121,-4,-97,-64,-45,-107,105,-24,50,69,55,72,-76,-61,-108,74,88,90,86,-93,-42,96,-33,-2,-9,122,-122,127,-110,3,54,23,-48,-19,-104,-80,126,0,73,-128,-80,14,79,110,70,-61,10,-102,-19,-64,13,-10,85,-45,-38,103,-113,64,-127,-48,-51,13,-64,123,-35,-51,42,-70,74,-21,-125,-5,-70,8,66,102,13,-124,-117,53,-70,-55,-92,-8,-112,-97,-96,-31,-82,118,-83,13,-123,69,-109,44,-121,-52,92,-77,-20,126,-34,6,-52,13,85,79,27,-78,43,85,-111,-6,21,31,-38,95,72,-3,44,-62,7,2,-126,1,1,0,-39,90,-28,-70,23,-80,-23,-99,-108,-91,54,7,-111,-79,34,-95,82,49,100,32,62,-54,-19,93,19,-6,22,112,-45,-67,-40,49,-10,-79,43,-100,7,43,-105,-2,-20,25,-104,13,-15,114,-52,-120,110,-58,11,1,126,102,-33,-36,28,47,113,37,-24,-15,-83,-97,55,109,-126,-50,-9,-2,-108,38,47,43,125,38,-90,42,7,-57,-16,-106,9,-8,103,-22,45,-13,25,-69,-111,74,-81,-58,-118,-43,50,52,12,-48,88,62,-71,119,3,111,85,41,50,-107,112,112,-115,-2,-23,-81,-128,17,59,49,-88,79,-97,64,127,34,53,-119,-25,47,-86,33,-34,25,68,-109,-100,21,-2,-83,-109,-65,-9,-78,-53,-124,-65,81,117,113,55,43,-78,-6,69,80,-84,-24,-36,-61,58,-47,-104,-12,42,33,21,-17,-118,4,14,-33,-14,2,44,-8,3,33,118,-7,-31,18,24,-8,96,-108,50,-85,115,-124,57,22,-101,16,9,-36,-105,-92,-94,121,48,-66,40,-18,44,-80,-36,68,126,-98,109,-101,-73,124,-62,122,-108,56,-36,1,-60,23,14,-78,-121,-87,-69,80,-6,-22,7,92,-85,56,-94,40,79,21,22,-59,-87,14,85,80,69,66,-1,-25,-79,43,-74,-47,44,106,-10,-65,2,-126,1,1,0,-33,-118,-19,-96,-23,71,34,-89,98,88,-2,44,70,63,-84,101,-46,-1,78,-6,-24,89,-66,62,-100,69,46,-101,-52,-96,123,93,14,-113,28,89,-76,-9,-108,-62,2,-97,-92,125,103,-118,-80,110,-64,47,63,35,60,14,123,-14,35,18,-31,6,-79,20,117,-102,-28,116,82,-7,-128,-19,77,-56,86,-58,19,-46,115,121,106,122,111,121,-51,-1,80,-126,-100,103,-49,120,93,22,-27,79,70,48,4,-105,-112,-64,90,49,115,31,76,61,17,42,-96,109,-55,126,99,-100,8,73,-8,-63,49,69,67,-81,-6,123,86,99,14,-79,-75,-1,13,-68,34,-19,86,24,28,114,-119,38,8,-108,108,56,3,53,-87,-77,110,-126,-91,-11,63,49,-111,9,54,28,64,-64,-40,92,123,-116,37,28,109,-100,91,52,-53,-94,-46,46,109,47,79,-5,-41,72,-39,25,-22,-9,-114,99,21,-58,-38,-92,-77,-20,-1,-52,-26,-124,115,12,-52,-1,-11,-9,117,126,-56,-47,22,119,-124,-34,-78,-75,-126,-53,9,-90,-91,1,-99,30,-84,1,40,71,-104,-15,-85,-58,-53,-69,70,-108,90,-104,-40,68,3,94,10,22,-51,89,38,-13,-94,21,35,46,20,-64,39,-43,34,108,-36,-53,2,-126,1,1,0,-41,-3,23,-49,-55,29,23,121,109,46,35,-101,-81,-18,-117,80,45,-30,64,-14,62,19,-33,126,32,12,-29,-31,-24,-73,-3,-81,-32,-54,60,96,-57,75,77,-74,-104,29,-14,-40,-32,55,73,2,-58,-71,108,84,102,-84,-118,6,43,-56,5,51,59,-31,117,-68,3,19,-126,-22,114,-53,-5,-94,90,59,104,25,81,3,-15,73,-127,77,71,-55,30,82,58,-87,25,-56,39,96,69,126,17,-106,60,86,54,-23,-114,-41,125,-21,-61,113,13,-6,107,118,-49,14,58,60,-73,49,-100,29,3,106,-100,43,-53,64,7,86,18,71,-32,-127,-96,26,25,-97,-104,98,-22,-73,124,-90,54,109,-116,18,-109,101,109,-52,-33,-36,-54,-117,85,70,-104,60,-52,38,118,-62,86,-97,-45,-45,-58,77,-84,-125,-91,-19,-44,110,60,10,103,111,105,-123,6,-70,-41,42,-23,-65,96,17,-60,-84,85,-107,110,57,-123,-117,-111,-111,48,-21,-4,60,91,-16,-117,-79,-22,-99,49,-75,-86,-15,122,80,68,44,-23,1,112,107,116,77,24,-12,36,-71,-54,80,35,-127,28,102,21,60,-60,52,-6,6,-2,87,33,-110,-8,36,-13,40,90,59,115,27,101,22,-32,-117,-54,12,-36,-9,2,-126,1,0,119,-72,-24,-62,92,81,115,114,25,-40,-88,-85,-29,-78,-10,125,103,89,-5,-21,61,3,49,-54,45,27,55,58,36,39,15,-118,0,-49,-100,17,9,-127,-107,1,57,115,104,36,-53,110,-93,19,54,-99,20,80,-69,121,77,48,-91,-68,-107,-84,-45,40,114,33,15,87,-109,114,100,48,6,96,42,127,104,-95,42,52,104,68,90,12,39,-100,-10,111,-11,-70,126,108,-62,4,-13,73,-123,-62,17,126,120,-30,-118,98,-5,83,-25,-26,56,-80,-64,-85,-94,55,114,23,-7,-67,-57,44,19,-57,101,-43,67,28,-121,-45,7,-56,115,-28,56,-82,-111,-14,-86,125,-83,-101,83,27,98,92,92,-114,62,6,-65,-6,50,-41,55,25,22,-110,93,-60,-61,27,-34,-91,-118,-16,43,-82,-33,-13,-68,-40,4,-121,-78,112,56,115,-76,-12,10,84,90,74,39,-42,85,-123,-40,29,55,29,32,-33,25,90,-38,-52,-125,8,-10,39,-72,-111,34,66,56,-29,0,-18,-67,-34,-64,-72,-57,88,-99,29,-36,-11,-89,6,-66,-85,9,-36,64,90,-11,72,14,-114,-37,42,-25,61,114,-7,85,-111,98,12,97,85,69,-81,48,-20,-65,92,-90,16,-127,22,101,51,-106,88,117,-83]"
//						, byte[].class));
//		java_privada = kf3.generatePrivate(spec3);
//		////System.out.println(java_privada.toString());
//
//
//		//    		{ //android
//		//    			PKCS8EncodedKeySpec spec2 = new PKCS8EncodedKeySpec(
//		//    					new Gson().fromJson(
//		//    							"[48,-126,2,117,2,1,0,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,4,-126,2,95,48,-126,2,91,2,1,0,2,-127,-127,0,-90,-84,-34,70,93,-51,-13,-122,26,86,109,-7,-115,26,114,2,-118,87,-89,-13,-112,-74,28,-34,-104,-65,-85,-67,-114,-55,-67,-55,112,-7,-55,29,48,126,-102,-94,65,64,72,-107,43,-122,53,118,-74,-113,103,-103,-1,42,83,-118,-127,90,-39,123,-63,13,-38,-111,51,100,-101,0,49,-7,-59,-8,-15,-106,-35,-66,-19,76,-20,-81,57,107,-65,86,25,-32,11,-66,43,-54,115,47,-34,-51,-122,-111,74,-59,-94,98,-21,-31,-71,70,122,121,-54,125,-89,-105,-83,-106,35,-38,-76,19,-43,-20,-95,54,35,58,-58,12,13,-49,-70,21,2,3,1,0,1,2,-127,-128,124,77,120,7,-86,117,-86,36,93,8,16,68,-120,-125,44,123,-48,-120,-58,-20,-45,3,-66,76,20,70,-3,-30,4,-41,87,-1,31,-114,105,-6,-90,-20,4,-114,-11,114,-25,-82,-72,35,3,68,97,-86,89,109,115,-21,49,26,-98,-106,14,-108,72,-55,-8,50,21,39,-104,-58,-53,103,14,-59,-69,-121,41,61,119,-15,93,-46,-64,122,-70,100,29,0,17,116,-84,5,88,-34,-117,73,4,-60,105,-23,92,-52,61,65,70,-77,39,-41,93,-48,-32,-42,-12,87,-96,-55,-78,-111,-19,-115,-58,-123,55,16,-115,13,-70,-13,-114,17,2,65,0,-37,50,-56,-62,42,-61,-106,48,73,53,-103,-82,-116,84,91,-69,83,90,-70,-14,93,73,-25,72,30,-125,9,67,-110,82,-108,-74,-79,112,-100,56,61,5,43,84,-78,18,-45,-114,-94,-100,-94,-15,-25,-77,-46,18,26,-113,109,-75,9,77,-127,50,101,-5,-84,115,2,65,0,-62,-88,-97,-57,-94,29,14,23,43,-127,-25,74,45,36,-13,-68,104,-113,-9,12,-59,-72,93,11,-67,38,-33,74,126,88,-118,-1,-128,35,-58,108,-21,86,-51,-68,-23,2,121,-102,-121,-4,-21,-60,104,-27,111,114,-29,49,-124,-100,95,3,-113,103,29,-42,-91,87,2,64,116,113,-85,2,-78,-13,10,19,6,-95,41,-51,-9,16,77,86,-37,54,4,-64,1,-36,-29,-73,-123,53,-7,50,-29,69,105,105,16,36,17,105,50,-55,79,54,-124,14,-54,66,40,-110,107,97,116,-60,43,33,-96,-24,118,-48,72,107,-38,-23,106,17,-29,-113,2,64,102,-64,95,-25,31,25,-69,48,91,-44,-20,99,-23,68,-110,44,39,-3,-90,104,-27,-115,-107,-1,-10,78,-88,-101,71,-22,49,37,1,92,-31,6,-23,-117,30,122,-45,124,108,-8,55,68,56,-89,-86,-65,65,127,33,-110,39,-17,-22,-17,-108,40,-40,69,79,109,2,64,126,-124,47,45,-102,37,63,-50,4,18,42,-13,82,-126,-76,21,16,41,6,86,-58,50,-70,-31,-39,-114,104,-18,11,78,-118,-67,-30,-101,-119,74,-19,117,91,-19,27,127,-77,-128,66,-33,67,-101,57,48,78,30,-102,-75,-101,-103,-2,116,68,-17,-70,65,-29,120]"
//		//    							, byte[].class));
//		//    			android_privada = kf.generatePrivate(spec2);
//		//    			////System.out.println(android_privada.toString());
//		//    		}
//		//
//		//
//		{
//			// encripto con android publica
//			byte[] enc = t.encryptFilePublic("123"
//					.getBytes(StandardCharsets.UTF_8), java_public);
//			String encode = Base64.getEncoder().encodeToString(enc);
//			////System.out.println(" -->" + encode + "<--");
//
//			//
//			byte[] des = t.decryptFilePrivate(
//					Base64.getDecoder().decode(
//							"tRddnIxut+M4wz7LVnS1isNA0qctIWgPhCmypomqxEbh97ZbbePA4mWrCNYDfV3TDZoY2u4OzXRiFbvE+/xr2eDH7fISAkUcXfvYTmNmeZlqj1lD2NbJ0zEC+S14vxTP3hW6YYby/zYVfPWDPGGZlxwp80g3PfjCScdIphYTudBDGOW3pzM4xXHnCIi94PUb4lDoMJW/Csh5kjt3679BEbF+nHcNzRdAw4cUiGCeHMo8I4wUaidzXveeU05EyosKWLpUIuEBU84cTmHAFDajuTxJdoDn7tLHJNb14RGE4B8BOTXHB5TEI3ZUKNI4VWOpcZ07CaRVuMVUEDWsohqJ1hdXHDU4RvSzahYU+cEQotHQOcCGXNmhKM4WX4RzdoydvQSX1Q73+AJAAVO1SM5MjvGUNPRlYRO87E/2Km/pkCohJAPe1DnkJTb9wtEhUtLntrRfZRacZ8w+9OF+i/RXBjX1MrKJ5K3NIajBm4bWl0v+gy8+Qu2dXRGT/U+OBXLhsAA4RVnugRkqvLMTtipTsTiu+URt1yNCJFzUmCkouy+IkjcwdouyhJgLRC7yPavw42YD5gAap3gft3wXC1KSr3PvJsQRh1URtD/No4+XerGQy826jy5cPWdf8XbSTyYXXqWSV+qXWQ8jZkrpvB69vjIQMkHRYfxvkY40Wg9ODkc="
//							.getBytes(StandardCharsets.UTF_8))
//					, java_privada);
//			////System.out.println("--->" + new String(des, StandardCharsets.UTF_8));
//		}
//
//		//    		{
//		//    			// encripto con java publica
//		//    			byte[] enc = t.encryptFilePublic("123"
//		//    					.getBytes(), java_public);
//		//    			String encode = Base64.getEncoder().encodeToString(enc);
//		//    			////System.out.println(encode);
//		//
//		////
//		//    			byte[] des = t.decryptFilePrivate(enc, java_privada);
//		//    			////System.out.println(new String(des, StandardCharsets.UTF_8));
//		//    		}
//		//    		}
//		//    		{
//		//    			byte[] enc = t.encryptFilePublic("hola melina como estas".getBytes(), ks.getPublic());
//		//
//		//    			String encode = Base64.getEncoder().encodeToString(enc);
//		//    			// ////System.out.println(encode);
//		//
//		//    			 byte[] des = t.decryptFilePrivate(enc, ks.getPrivate());
//		//    			 ////System.out.println(new String(des, StandardCharsets.UTF_8));
//		//    		}
//	}
}