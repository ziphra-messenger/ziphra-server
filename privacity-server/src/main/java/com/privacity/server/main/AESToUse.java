package com.privacity.server.main;


import java.security.spec.KeySpec;
import java.time.LocalDateTime;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.lang3.builder.ToStringExclude;
import org.springframework.beans.factory.annotation.Value;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.annotations.Expose;
import com.privacity.common.dto.AESDTO;
import com.privacity.server.common.adapters.LocalDateAdapter;

import lombok.Getter;


public class AESToUse {


	@Getter
	@Expose 
	private String secretKeyAES;
	@Getter
	@Expose 
	private String saltAES;
	@Expose 
	@Getter
	@Value("${privacity.security.encrypt.bits}")
	private int bitsEncrypt;
//	
	@Expose 
	@Getter
	@Value("${privacity.security.encrypt.iteration.count}")
	private int interationCount;
	@JsonIgnore
	@ToStringExclude
	private Cipher decrypt;
	@JsonIgnore
	
	@ToStringExclude
	private Cipher encrypt;
	
	@Getter
	private AESDTO AESDTO;

	public AESToUse(int bitsEncrypt2, int interationCount2 , String secretKeyAES2, String saltAES2) throws Exception {
		this.secretKeyAES = secretKeyAES2;
		this.saltAES = saltAES2;
		this.bitsEncrypt =bitsEncrypt2;
		this.interationCount=interationCount2;
		
		this.AESDTO= new AESDTO();
		this.AESDTO.setSecretKeyAES(secretKeyAES);
		this.AESDTO.setSaltAES(saltAES2);
		this.AESDTO.setIteration(interationCount2 +"");
		this.AESDTO.setBitsEncrypt(bitsEncrypt+"");


		{
			byte[] iv = new byte[16];
			IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);
			SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
			KeySpec keySpec = new PBEKeySpec((secretKeyAES).toCharArray(), (saltAES).getBytes(), interationCount, bitsEncrypt);
			SecretKey secretKeyTemp = secretKeyFactory.generateSecret(keySpec);
			SecretKeySpec secretKey = new SecretKeySpec(secretKeyTemp.getEncoded(), "AES");
			Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
			cipher.init(Cipher.DECRYPT_MODE, secretKey, ivParameterSpec);
			decrypt = cipher;
			
		}
		{
			byte[] iv = new byte[16];
			IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);
			SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
			KeySpec keySpec = new PBEKeySpec((secretKeyAES).toCharArray(), (saltAES).getBytes(), interationCount, bitsEncrypt);
			SecretKey secretKeyTemp = secretKeyFactory.generateSecret(keySpec);
			SecretKeySpec secretKey = new SecretKeySpec(secretKeyTemp.getEncoded(), "AES");
			Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
			cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParameterSpec);
			encrypt=cipher;
		}
	}



	public String getAES(String data) {
		try {

			return Base64.getEncoder().encodeToString(encrypt.doFinal(data.getBytes()));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] getAESData(byte[] data) {
		try {

			return encrypt.doFinal(data);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public String getAESDecrypt(String data) throws Exception {
		
		
		if (data == null) return null;
		if (data == "") return "";

		String r = new String(decrypt.doFinal(Base64.getDecoder().decode(data)));
		//////System.out.println("Entrada: " + data + " Salida: " + r);
		return r;


	}

	public byte[] getAESDecryptData(byte[] data) throws Exception {
		
		
		if (data == null) return null;
		//if (data == "") return "";

		
		//////System.out.println("Entrada: " + data + " Salida: " + r);
		return decrypt.doFinal(data);


	}
	
	@Override
	public String toString() {
		return "AESToUse [secretKeyAES=" + secretKeyAES + ", saltAES=" + saltAES + ", bitsEncrypt=" + bitsEncrypt
				+ ", interationCount=" + interationCount + "]";
	}
	
	public static void main(String[] args) throws Exception {
		//retKeyAES=1000, saltAES=128, iteration=50]
		String s = "[-39,-44,-35,-72,4,-78,-70,-105,-55,110,-34,34,-92,54,-18,-45,18,-25,-124,30,96,85,-96,126,5,-117,-92,-22,90,123,87,63,-17,75,4,22,34,-111,50,-122,50,-112,-63,-15,-42,-34,-106,110,12,-15,5,-123,47,56,14,61,58,109,-60,1,108,-22,26,-1,111,-103,-69,-108,-84,39,33,56,35,104,125,-22,-102,33,80,-23,92,124,90,77,8,81,-10,122,-63,81,26,65,96,19,-97,95,-68,-6,85,-64,-66,4,9,52,-31,-37,-99,24,-118,-45,-6,55,101,-44,69,-99,57,20,-93,-90,64,-56,31,-6,-121,36,-63,63,-128,-53,-42,-38,-111,-27,-121,-91,-121,-17,48,123,45,70,-33,-16,-64,127,115,10,-35,-62,71,-80,-25,-10,-14,21,-27,109,-90,4,-73,27,-108,-4,-110,10,9,112,35,-30,90,-69,108,40,18,6,-63,-66,80,87,43,40,74,-112,13,-65,-118,73,111,45,-65,8,-46,-29,29,-89,44,38,-23,53,31,15,90,78,37,-29,46,125,-30,76,-90,73,-7,-91,24,104,123,-38,30,-42,61,-115,27,-37,46,-14,-96,3,-21,-128,-80,-128,34,-23,-19,32,116,28,-55,-67,90,85,4,56,117,-117,-21,32,2,30,45,-125,-115,-67,61,-98,125,6,-80,59,-25,-45,22,-1,-54,84,46,-124,-71,-91,-101,-48,117,-124,8,123,-105,95,6,-32,-2,-36,113,-34,-3,-9,-49,-123,97,88,-114,-48,-83,-58,112,105,-35,-85,-40,81,78,85,-16,126,52,80,-108,21,-60,-6,19,-18,37,59,32,38,7,-97,-10,105,122,-22,43,22,21,-10,-5,-100,100,-76,40,39,113,118,43,104,-42,56,-48,11,-53,87,-106,-60,-75,28,-93,-79,126,57,-57,114,71,-15,66,49,83,20,-22,86,-60,-90,-34,-64,64,-4,-72,40,-31,-29,86,55,-26,-15,-47,54,-47,124,-123,-65,-55,-60,29,-114,-60,-98,46,109,17,-12,75,-125,-103,-80,-74,-69,49,-9,-76,73,39,-100,-92,-93,127,-55,-114,126,-97,-117,24,-4,92,-39,-21,-14,-80,-18,43,68,21,-92,67,-46,-68,37,-75,-89,107,38,18,110,-29,123,-72,-126,74,41,87,-11,-112,-117,69,50,-46,-25,-82,-29,35,56,100,21,-100,-52,110,65,-16,-79,-23,28,-116,-82,-20,4,-15,68,41,113,-28,72,22,101,-108,67,-93,123,-73,-112,121,-128,-98,-84,100,-37,63,-102,65,-26,-109,34,61,-15,102,-27,38,-94,59,31,81,-77,-32,16,-52,13,-95,90,80,85,32,-37,41,-3,-12,106,52,-89,79,-5,-44,-125,124,-112,-49,109,21,112,11,-59,38,47,97,-64,-105,-55,-108,-30,111,-37,-38,72,63,-43,16,34,69,-74,14,-47,-9,47,-109,-84,1,-83,71,-29,-102,-77,88,83,25,118,-105,-26,-60,-97,99,-83,-104,-63,66,29,-103,69,-96,17,-106,33,-50,24,50,-25,21,-30,58,-75,-24,63,27,-112,-54,54,-72,-112,6,-5,-123,-67,19,105,-74,109,-33,23,-70,31,76,7,-19,-86,-121,-24,64,46,-85,-61,94,102,-46,-109,93,26,30,121,-114,66,-49,-113,23,92,-14,22,15,-28,-101,123,41,41,38,118,113,78,65,105,112,12,-41,31,-8,94,-2,-84,84,-4,26,-62,-100,4,80,126,-93,90,-51,-61,-28,12,117,78,-109,124,89,121,-67,-5,-95,16,5,107,46,-40,10,-54,20,-31,-51,36,95,-109,38,23,19,52,89,1,-106,-51,-128,122,-109,-35,-106,-66,39,44,-28,108,67,53,-124,120,89,96,31,-110,68,70,38,-93,28,-73,-32,27,98,-31,20,-97,-63,-110,45,-115,-114,-69,-75,79,-16,52,-124,35,46,-125,9,-66,-26,-44,124,-37,-31,-77,-122,125,-9,-3,2,-78,-99,5,-12,-15,67,81,49,1,51,-19,86,-47,-118,-35,-105,-126,98,-36,74,-18,-87,85,25,101,127,-25,-97,105,123,99,98,-105,-94,-17,71,-85,96,55,-63,-98,-102,118,-116,9,46,-113,-101,60,79,67,58,-89,3,51,-9,34,-23,-52,114,-92,-64,49,-41,-107,86,-20,127,47,-104,-62,92,21,63,80,10,-81,-104,1,-32,98,-83,27,-76,-43,111,118,53,-11,-90,44,65,-41,-27,-107,11,-46,-101,64,-69,22,-35,109,-75,-71,69,-95,45,-73,-121,109,56,99,-82,-111,-116,65,77,39,54,97,62,1,-10,110,-63,-95,61,-102,-75,-92,-75,-54,-11,125,-14,35,-123,80,-43,85,-7,-28,-124,-2,46,-51,98,41,-88,-88,68,121,-117,-49,-6,-23,67,110,-80,33,113,-102,-14,-119,97,66,-26,101,68,-78,124,36,46,75,-73,-125,122,22,86,112,-128,-71,68,122,120,115,-92,81,-64,-10,8,-22,90,-54,121,-118,-87,109,-58,-8,-9,53,-53,89,-105,-80,8,121,-87,-117,118,77,-100,9,-113,91,-37,36,-11,-44,-83,-73,72,9,15,-7,-108,-102,41,-47,0,-30,-60,-88,22,-10,-7,121,-61,33,71,-103,-120,107,62,-86,0,-63,100,-39,-96,-70,97,-51,110,65,-9,-43,74,21,60,-118,-65,-56,115,52,-49,22,-91,46,-14,53,109,-31,-118,-70,-18,98,-106,9,-94,16,110,8,-105,-58,18,43,-105,6,-32,-3,64,0,-20,88,43,93,8,42,100,12,-127,-51,16,58,-46,114,116,5,-9,-24,24,-99,54,-5,25,-114,-27,49,-55,-64,-7,-76,40,-103,-50,59,12,73,-52,22,74,9,-113,-117,-39,20,31,-75,-90,-5,83,-96,10,-95,-66,-84,0,73,47,-89,-33,50,111,-53,40,-90,-16,19,-19,-45,-58,-23,51,-3,40,9,27,-40,82,22,124,56,-8,-15,-98,-98,-24,-121,42,-5,39,44,-64,-71,-98,-18,94,-82,-109,105,-109,16,26,-84,65,-119,13,95,19,-66,-112,-29,50,127,-11,7,-118,-128,70,-89,60,4,83,0,55,55,-62,-73,-88,82,-65,-74,68,121,7,-110,-115,-47,-52,95,45,46,-41,-80,3,93,45,36,79,118,90,-120,92,-34,-110,93,32,18,75,17,81,13,90,43,13,-10,100,-94,-18,-104,71,-63,83,115,-115,-52,-1,-96,4,-85,-96,-79,-18,-118,-104,-127,63,6,127,71,85,13,-47,-64,-94,21,-95,21,-26,47,-118,-1,-85,13,84,-21,91,-121,-5,-21,-64,-66,87,-56,-124,48,55,124,-86,61,-6,74,-96,50,20,47,-14,-32,110,113,-91,-12,-70,-107,62,127,118,30,30,62,3,42,-128,-108,41,-126,56,93,8,58,-9,-118,-86,27,5,-4,121,-96,-123,6,46,-50,-75,74,-126,-98,-98,62,104,-12,92,-53,-105,-73,12,-117,105,-8,-114,71,-121,-36,-117,43,-38,14,52,-59,-44,-93,-76,0,96,-24,68,-125,51,27,-89,-45,44,-107,112,123,-86,115,16,91,56,-27,-58,-28,-122,-41,91,86,121,123,127,-62,6,81,-53,1,4,-2,59,47,-15,-22,5,-27,112,75,73,-92,49,111,81,32,84,-12,-6,-71,-128,-25,-119,-46,76,14,-70,127,-37,49,-81,-81,-120,120,-93,-116,-67,1,-11,47,83,64,11,90,-59,122,80,-101,-66,32,95,127,76,123,-9,47,32,-88,-89,-65,-21,-73,-62,-50,-41,-17,-1,3,-112,5,-100,-4,13,-19,79,35,31,-80,113,-83,-12,56,0,124,2,59,32,23,-41,119,73,-10,35,-6,-116,-71,-101,38,-24,27,31,36,24,101,-119,-38,106,77,-32,-41,75,99,77,-73,93,74,-8,2,64,127,-113,20,15,104,-64,37,4,-69,53,-13,-4,85,-64,-82,123,-69,-37,104,-19,23,96,15,-39,112,107,-108,16,73,-62,38,-81,-78,117,-117,-19,124,91,84,117,-98,107,113,3,42,-2,19,-22,-8,-64,-62,-23,114,-50,74,86,-86,-64,46,-107,-91,-75,-10,-41,71,-24,-39,-125,64,-31,-117,-114,-82,61,-87,30,116,-103,-28,112,74,34,-104,-39,-18,-31,-104,97,-11,122,-68,4,89,103,-95,41,81,-34,86,39,-28,-53,-65,23,-89,86,72,11,85,-70,20,-113,-76,-80,-124,-56,-58,-20,71,-91,-20,-77,-21,48,75,-110,-48,115,-32,-70,93,77,-58,68,-126,-85,-36,34,111,105,28,-37,-74,6,-47,-105,-91,-120,109,84,22,-91,-89,-6,-80,16,109,33,-52,-12,-42,-56,126,93,-107,-78,-39,72,-67,-113,118,-60,33,-125,0,-107,-15,14,-4,3,11,46,-65,-54,72,43,33,98,82,-80,82,-94,53,-61,-108,69,-24,-36,41,-118,-96,-102,-124,-3,-38,-85,34,16,117,127,82,118,66,-23,20,-36,84,-97,-96,101,106,109,-6,-4,84,-19,44,-39,-121,-45,-74,40,95,94,65,-17,106,92,-94,25,-57,-42,-103,65,-103,-70,-23,-118,99,-32,-12,-123,86,-115,-21,-27,98,-5,60,-126,-48,14,-114,99,42,-48,64,14,0,-42,-8,-98,12,120,-122,-23,-15,26,-115,-52,-81,-65,-65,34,-97,-68,-21,120,68,-108,16,64,0,-105,-15,-8,39,36,119,-46,-108,-48,5,-51,45,38,-93,-80,-25,53,82,13,-16,99,51,-96,110,-79,85,-122,125,29,-74,57,82,-60,-91,55,-21,34,-52,41,-64,16,123,86,114,-108,-3,-120,-33,108,-65,91,20,114,-23,23,29,64,59,61,-106,-33,-91,-11,-30,-19,-7,-108,28,19,56,60,-113,80,-83,-29,52,-38,9,-3,-101,9,7,-56,34,-111,-4,67,97,110,122,-102,-8,-7,90,-18,-78,111,-70,126,74,30,-36,-35,-58,52,-97,103,83,52,-10,90,-4,48,-73,-73,-68,-31,-93,-29,47,-90,61,59,-91,-100,0,-2,40,-72,103,42,-83,-48,62,-122,-53,73,49,-32,61,-123,-51,-1,-31,82,93,85,65,-46,3,41,74,42,-44,87,77,22,28,-122,-32,43,126,29,36,20,-96,37,-10,15,44,-128,5,-28,121,-48,105,22,39,-68,10,24,-100,85,-48,25,120,33,21,-59,49,96,72,50,-118,-111,4,-109,109,-21,75,12,-87,3,-126,-110,86,80,68,-64,-2,-46,-20,57,123,-90,-57,107,-46,-39,91,-114,120,-11,102,87,0,-51,124,-19,-21,-49,50,49,-15,114,-7,-17,-21,-125,86,-29,98,117,93,-54,-38,57,-46,-68,-124,84,-53,48,-30,59,3,106,-112,50,49,-21,58,-85,66,28,50,-51,54,21,11,-71,-94,66,18,23,-36,25,-56,6,25,62,-108,62,3,-64,-8,-76,15,-94,61,40,22,61,-78,108,98,25,11,13,-12,45,111,6,58,73,-104,64,11,-100,109,22,-53,37,-82,-92,49,77,-32,52,-65,-112,-34,121,-70,68,-64,-1,-87,-5,-28,93,58,10,44,-123,77,-24,-112,-127,-33,-58,70,19,52,73,-54,54,120,83,-28,59,-76,-122,-86,13,-9,115,50,52,-78,-10,58,15,48,79,-117,17,97,-88,-96,44,-51,-96,-32,-110,54,-46,47,76,6,-72,-35,39,-123,81,-114,24,-51,-81,-7,-125,115,-102,124,104,-40,11,-56,44,1,-6,-33,117,19,37,-61,-56,81,28,-49,-66,-83,-96,39,-105,47,-47,-55,87,-62,93,7,-6,2,15,-45,-101,127,42,125,-122,116,-121,31,-19,49,-37,-25,65,107,35,91,56,-82,-55,-54,-104,-58,59,-104,-88,-77,-82,4,89,127,32,-51,-81,76,56,74,113,28,89,-82,-62,10,-92,-35,-108,-113,-20,-84,-4,38,118,41,-98,92,47,48,-105,-75,-71,-111,78,-11,21,-36,-29,-111,57,-69,-10,65,-2,-122,51,85,29,-34,-1,2,-44,-74,-74,99,71,127,-76,-82,118,-64,106,58,-54,-47,-5,-61,116,84,42,73,-128,-53,-77,-14,6,30,70,-113,-41,-100,-68,50,-89,73,47,87,-12,-106,12,82,58,-76,-88,46,13,66,-88,-22,-78,-115,45,29,11,84,-53,-74,62,84,-78,82,-81,44,120,-33,-4,-39,-95,69,-47,-79,68,33,109,-121,-122,108,11,113,-64,0,-97,-8,-93,-107,96,-49,88,-126,48,-64,30,-93,-40,-49,-49,38,-7,1]";

		AESToUse aesToUse = new AESToUse(256, 50, "1000", "128");
		aesToUse.getAESDecrypt(s);
		Gson gson = new GsonBuilder()
				.setPrettyPrinting()
				.registerTypeAdapter(LocalDateTime.class, new LocalDateAdapter())
				.create();
		
//		byte[] g = gson.fromJson(s,byte[].class);
//		
//		 System.out.println(" g " +  g);
//		byte[] a = aesToUse.getAESDecryptData(
//		g
//				
// );
//		
	
//
//    KeyFactory kf3 = KeyFactory.getInstance("RSA");
//    PKCS8EncodedKeySpec spec3 = new PKCS8EncodedKeySpec(
//            a);
//    PrivateKey privateKeyPrivacity = kf3.generatePrivate(spec3);
//    System.out.println(privateKeyPrivacity.toString());
	}
}    

