package ar.ziphra.common.util;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Modifier;
import java.time.LocalDateTime;
import java.util.Base64;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import ar.ziphra.common.adapters.LocalDateAdapter;
import ar.ziphra.common.dto.ProtocoloDTO;
import ar.ziphra.common.enumeration.ExceptionReturnCode;
import ar.ziphra.common.exceptions.ZiphraException;
import ar.ziphra.common.interfaces.AESToUseInterface;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public  class UtilsStringAbstract {

	public static final String CONSTANT__DEFAULT_CHARSET = "UTF-8";
	
	private final int MAX_LOG = 2000;

	public final String cutStringToGson(Object s) {
		return cutString(gsonToSend(s));
	}

	public final String cutString(String s) {

		if (s == null) return s;
		if (s.length() < MAX_LOG) return s;

		String r = replacingToShow(s);

		return r.substring(0, (r.length()> MAX_LOG)? MAX_LOG : r.length()-1);
	}

	public final String uncompressB64(String s) throws ZiphraException {

		try {
			if (s==null)return s;
			byte[] b = Base64.getDecoder().decode(s);
			byte[] unz = new ZipUtil().decompress(b);

			return new String(unz);

		} catch (IOException e) {
			e.printStackTrace();
			throw new ZiphraException(ExceptionReturnCode.ZIP_DECOMPRESS);
		}
	}

	public final String compressB64(String s) throws ZiphraException  {
		try {
			if (s==null)return s;
			s=replacing(s);
			byte[] compressed;

			compressed = new ZipUtil().compress(s.getBytes());

			s=Base64.getEncoder().withoutPadding().encodeToString(compressed);
			return s;

		} catch (IOException e) {
			e.printStackTrace();
			throw new ZiphraException(ExceptionReturnCode.ZIP_COMPRESS);
		}
	}

	public String protocoloToSendEncrypt(AESToUseInterface aes, ProtocoloDTO p,Object protolocoObject) throws ZiphraException {
		//if(aes.getAESDTO() != null) {	log.trace(aes.getAESDTO().toString());}
		if (protolocoObject==null)return protocoloToSendEncrypt(aes,p);
		
		String obj = gsonToSend(protolocoObject);
		p.setObjectDTO(obj);
		log.trace("protolocoObject to send:" +  obj);
		
		return protocoloToSendEncrypt(aes, p);
		
	}
	public String protocoloToSendEncrypt(AESToUseInterface aes, ProtocoloDTO p) throws ZiphraException {
		//if(aes.getAESDTO() != null) {	log.trace(aes.getAESDTO().toString());}
//		if ( "[]".equals(p.getObjectDTO())) {
//			p.setObjectDTO(null);
//		}
		
		String s1 = gsonToSend(p);
		//byte[] compressed = compress(s1.getBytes());
		log.trace("Protocolo to send:" +  s1);
		String encryp = aes.getAES(s1);
		//log.trace("Protocolo encriptado:" +  gsonToSend(encryp));
		
		//log.trace("Protocolo compressed:" +  gsonToSend(compressed));
	//String return64 = gson().toJson(encryp);
		//log.trace("Protocolo 64:" +  return64);
		return encryp;
		
	}
	public ProtocoloDTO protocoloToSendDecrypt(AESToUseInterface aes, String protocoloString) throws ZiphraException {
		log.trace("protocoloToSendDecrypt");
		log.trace("entrada: " +protocoloString);
		//if(aes.getAESDTO() != null) {	log.trace(aes.getAESDTO().toString());}
		
			//String b = gson().fromJson(protocoloString, String.class);
			//log.trace("Protocolo compress:" +  gsonToSend(b));
			
			//log.trace("Protocolo encrypr:" + b);
			 //String descryp = null;

			String descryp;
			try {
				descryp = aes.getAESDecrypt(protocoloString);
			} catch (Exception e) {
				e.printStackTrace();
				log.error(ExceptionReturnCode.DECRYPT_PROCESS.toShow(e));
				throw new ZiphraException(ExceptionReturnCode.DECRYPT_PROCESS);
			}

	
			log.trace("Protocolo descryp:" + descryp);
			//String pString = convertBytesToString(descryp);
			//byte[] decompressed = decompress(descryp.getBytes()				);
			//String pString = convertBytesToString(decompressed);
			
			
			ObjectMapper mapper = new ObjectMapper();
			ProtocoloDTO p;
			try {
				p = mapper.readValue(descryp, ProtocoloDTO.class);
			} catch (JsonMappingException e) {
				e.printStackTrace();
				log.error(ExceptionReturnCode.DECRYPT_PROCESS.toShow(e));
				throw new ZiphraException(ExceptionReturnCode.DECRYPT_PROCESS);
			} catch (JsonProcessingException e) {
				e.printStackTrace();
				log.error(ExceptionReturnCode.DECRYPT_PROCESS.toShow(e));
				throw new ZiphraException(ExceptionReturnCode.DECRYPT_PROCESS);
			}
			
			if ("[]".equals(p.getObjectDTO())) {
				p.setObjectDTO(null);
			}
			
			log.trace("Salida Protocolo Gson Decrypt" + replacing(gson().toJson(p)));
			
			System.out.println ("Salida Protocolo Gson Decrypt" + replacing(gson().toJson(p)));
			return p;
	}

	public byte[] decryptData(AESToUseInterface aes, byte[] decompressed) throws ZiphraException{
		try {
			return aes.getAESDecryptData(decompressed);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(ExceptionReturnCode.DECRYPT_PROCESS.toShow(e));
			throw new ZiphraException(ExceptionReturnCode.DECRYPT_PROCESS);
		}
	}
	
	public String convertBytesToString(byte[] bytes) throws ZiphraException {
		
		if (bytes==null) return null;
		try {
			return new String(bytes, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
		
	}
	public byte[] compress(byte[] encryp) throws ZiphraException {
		byte[] compressed;
		try {
			compressed = new ZipUtil().compress(encryp);
		} catch (IOException e) {
			e.printStackTrace();
			throw new ZiphraException(ExceptionReturnCode.ZIP_COMPRESS);
		}
		return compressed;
	}
	
	public byte[] decompress(byte[] decryp) throws ZiphraException {
		byte[] decompress;
		try {
			decompress = new ZipUtil().decompress(decryp);
		} catch (IOException e) {
			e.printStackTrace();
			log.error(ExceptionReturnCode.ZIP_DECOMPRESS.toShow(e));
			throw new ZiphraException(ExceptionReturnCode.ZIP_DECOMPRESS);
		}
		return decompress;
	}
	
	public String gsonToSendCompress(Object s) throws ZiphraException {
		if (s==null)return null;
		String s1 = gsonToSend(s);

		return compressB64(s1);
	}


	public String gsonToSend(Object s) {
		if (s==null)return null;
		
		ObjectMapper mapper = new ObjectMapper();
	  	  String dtoAsString=null;
		try {
			dtoAsString = mapper.writeValueAsString(s);
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
			//throw new ZiphraException(ExceptionReturnCode.GENERAL_INVALID_SENT_DATA);
		}
	  	dtoAsString= replacing(dtoAsString);
		return dtoAsString;
	}	

	public final Gson gson() {
		return new GsonBuilder()
				.registerTypeAdapter(LocalDateTime.class, new LocalDateAdapter())
				//.excludeFieldsWithoutExposeAnnotation()
				.excludeFieldsWithModifiers(Modifier.STATIC)
				.serializeNulls()
				.create();

		
	}
	public final Gson gsonPretty() {
		return new GsonBuilder()
				.setPrettyPrinting()
				.registerTypeAdapter(LocalDateTime.class, new LocalDateAdapter())
				//.excludeFieldsWithoutExposeAnnotation()
				.excludeFieldsWithModifiers(Modifier.STATIC)
				.serializeNulls()
				.create();

		
	}
	public final String replacing(String s) {
		if (s == null) return s;

		String r = s.toString().replace("\n", "").replace("\t", "").replace("\r", "").replace("\b", "").replace("\f", "")
				.replace("  ", " ").replace("  ", " ").replace("  ", " ").replace(", " , ",");

		return r;
	}
	
	private final String replacingToShow(String s) {
		if (s == null) return s;

		String r = s.toString().replace("\n", "").replace("\t", "").replace("\r", "").replace("\b", "").replace("\f", "")
				.replace("  ", " ").replace("  ", " ").replace("  ", " ").replace(", " , "");

		return r;
	}

	public final Object clon(Class<?> clazz, Object o ) {
		
	       
        String j = gson().toJson(o);
        
        Object fromJson = gson().fromJson(j, clazz);
		return fromJson;
		
	}
	
	
	public static void main(String[] args) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		
		String j="{\"action\":\"MESSAGE_SEND\",\"asyncId\":\"2\",\"component\":\"MESSAGE\",\"messageDTO\":{\"idGrupo\":\"UF4jQyWZnguWcO1QjnSjqA==\",\"mediaDTO\":{\"downloadable\":true,\"idGrupo\":\"UF4jQyWZnguWcO1QjnSjqA==\",\"mediaType\":\"IMAGE\",\"miniatura\":\"\"},\"permitirReenvio\":true,\"text\":\"bRmThTZkxgnHwsI3EjfwUA==\"},\"requestIdDTO\":{\"requestIdClientSide\":\"SDdaqFZXWBXXjRnIY4\"}}\r\n";
		ProtocoloDTO p = mapper.readValue(j, ProtocoloDTO.class);
		
		Gson gson = new GsonBuilder()
		//.setPrettyPrinting()
		.registerTypeAdapter(LocalDateTime.class, new LocalDateAdapter())
		//.excludeFieldsWithoutExposeAnnotation()
		.excludeFieldsWithModifiers(Modifier.STATIC)
		.serializeNulls()
		.create();
		
		System.out.println(gson.toJson(p));
	}
}
